# we explicitly use platforms for //src/swift
bazel_dep(name = "platforms", version = "0.0.10")

# standalone LLVM
bazel_dep(name = "toolchains_llvm", version = "1.0.0")

# Override toolchains_llvm to newer Git sha. Currently up in the air as to who will maintain
# the module in BCR: https://github.com/bazel-contrib/toolchains_llvm/issues/298
archive_override(
    module_name = "toolchains_llvm",
    integrity = "sha256-iMhJcaAL7BM1sioDuNroe/F+CYFstC8ICRkKDNhtzKo=",
    strip_prefix = "toolchains_llvm-2f58ae4a90f9d1b2a359ba3636fc449ccf578bce",
    urls = ["https://github.com/bazel-contrib/toolchains_llvm/archive/2f58ae4a90f9d1b2a359ba3636fc449ccf578bce.tar.gz"],
)

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    llvm_versions = {
        "darwin-x86_64": "15.0.7",
        "linux-aarch64": "18.1.2",
        "": "17.0.6",
    },
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

# golang
bazel_dep(name = "rules_go", version = "0.47.0")
bazel_dep(name = "gazelle", version = "0.36.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution platforms.
go_sdk.download(version = "1.22.2")

# haskell
bazel_dep(name = "rules_haskell", version = "0.19")
ghc_version = use_extension("//extensions:ghc_version.bzl", "ghc_default_version")
use_repo(
    ghc_version,
    "rules_haskell_ghc_version",
)

# kotlin
bazel_dep(name = "rules_kotlin", version = "1.9.5")
bazel_dep(name = "rules_graalvm", version = "0.11.1")

# rules_graalvm hasn't yet published 0.11.2 to BCR
archive_override(
    module_name = "rules_graalvm",
    integrity = "sha256-JweZfVu+CFIYM0Q78qJpUbyj+uBbb/l8983xDK0/vCA=",
    strip_prefix = "rules_graalvm-7c53c1a1ddf82fd775be2fc62d22783ec2ba4326",
    urls = ["https://github.com/sgammon/rules_graalvm/archive/7c53c1a1ddf82fd775be2fc62d22783ec2ba4326.tar.gz"],
)

gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")
gvm.graalvm(
    name = "graalvm",
    distribution = "ce",  # `oracle`, `ce`, or `community`
    java_version = "22",  # `17`, `20`, `21`, or `22` as supported by the version provided
    version = "24.0.1",  # gvm sdk version format like `24.x.x` also supported
)
use_repo(gvm, "graalvm")

register_toolchains("@graalvm//:jvm")

register_toolchains("@graalvm//:sdk")

bazel_dep(name = "rules_jvm_external", version = "6.1")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "com.github.oshi:oshi-core:6.6.0",
    ],
)
use_repo(maven, "maven")

# rust
bazel_dep(name = "rules_rust", version = "0.42.1")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.77.2"],
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "libc",
    version = "0.2.154",
)
crate.from_specs(name = "crates")
use_repo(crate, "crates")

# ruby
bazel_dep(name = "rules_ruby", version = "0.9.1")

# override for 3.3.1
archive_override(
    module_name = "rules_ruby",
    integrity = "sha256-f5pp4OvJA/lUBNsoo/6d+lLyH7WfBhIBMwps25rLpAM=",
    strip_prefix = "rules_ruby-7c8d7767672ceb2f63853923ef7fc5e65cf34af6",
    urls = ["https://github.com/bazel-contrib/rules_ruby/archive/7c8d7767672ceb2f63853923ef7fc5e65cf34af6.tar.gz"],
)

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    version = "3.3.1",
)
ruby.bundle_fetch(
    name = "bundle",
    gem_checksums = {
        "ffi-1.16.3": "6d3242ff10c87271b0675c58d68d3f10148fabc2ad6da52a18123f06078871fb",
    },
    gemfile = "//src/rb:Gemfile",
    gemfile_lock = "//src/rb:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

# python
bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    is_default = True,
    python_version = "3.12",
)

# swift

bazel_dep(name = "rules_swift", version = "1.18.0", repo_name = "build_bazel_rules_swift")

# zig
bazel_dep(name = "rules_zig", version = "0.4.0")

zig = use_extension(
    "@rules_zig//zig:extensions.bzl",
    "zig",
)
zig.toolchain(zig_version = "0.12.0")
