# we explicitly use platforms for //src/swift
bazel_dep(name = "platforms", version = "0.0.10")

# standalone LLVM
bazel_dep(name = "toolchains_llvm", version = "1.1.2")

# Override toolchains_llvm to newer Git sha. Currently up in the air as to who will maintain
# the module in BCR: https://github.com/bazel-contrib/toolchains_llvm/issues/298
archive_override(
    module_name = "toolchains_llvm",
    integrity = "sha256-1SXIvezw090Cfbxfto5ldOpnGO1pxbfUW2yX66iG158=",
    strip_prefix = "toolchains_llvm-a1a5013732b30b1c0b03e904726106a301913ec0",
    urls = ["https://github.com/bazel-contrib/toolchains_llvm/archive/a1a5013732b30b1c0b03e904726106a301913ec0.tar.gz"],
)

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
    # We just use the newest ones we can pick out of https://github.com/bazel-contrib/toolchains_llvm/blob/master/toolchain/internal/llvm_distributions.bzl
    llvm_versions = {
        "darwin-aarch64": "18.1.8",
        "darwin-x86_64": "15.0.7",
        "linux-aarch64": "18.1.2",
        "linux-x86_64": "17.0.6",
        "": "15.0.7",
    },
)
use_repo(llvm, "llvm_toolchain")

register_toolchains("@llvm_toolchain//:all")

# golang
bazel_dep(name = "rules_go", version = "0.51.0")
bazel_dep(name = "gazelle", version = "0.40.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution platforms.
go_sdk.download(version = "1.23.1")

# kotlin
bazel_dep(name = "rules_kotlin", version = "2.0.0")
bazel_dep(name = "rules_graalvm", version = "0.11.1")

# rules_graalvm hasn't yet published 0.11.2 to BCR
archive_override(
    module_name = "rules_graalvm",
    integrity = "sha256-JweZfVu+CFIYM0Q78qJpUbyj+uBbb/l8983xDK0/vCA=",
    strip_prefix = "rules_graalvm-7c53c1a1ddf82fd775be2fc62d22783ec2ba4326",
    urls = ["https://github.com/sgammon/rules_graalvm/archive/7c53c1a1ddf82fd775be2fc62d22783ec2ba4326.tar.gz"],
)

gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")
gvm.graalvm(
    name = "graalvm",
    distribution = "ce",  # `oracle`, `ce`, or `community`
    java_version = "22",  # `17`, `20`, `21`, or `22` as supported by the version provided
    version = "24.0.1",  # gvm sdk version format like `24.x.x` also supported
)
use_repo(gvm, "graalvm")

register_toolchains("@graalvm//:jvm")

register_toolchains("@graalvm//:sdk")

bazel_dep(name = "rules_jvm_external", version = "6.6")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "com.github.oshi:oshi-core:6.6.1",
    ],
)
use_repo(maven, "maven")

# rust
bazel_dep(name = "rules_rust", version = "0.56.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    versions = ["1.82.0"],
    sha256s = {"rustc-1.82.0-aarch64-apple-darwin.tar.xz": "ca9b9cab552c86ac7a28d8fb757c95a363bb5d6413b854b19472950eab2a9fa4", "clippy-1.82.0-aarch64-apple-darwin.tar.xz": "bd1ba77f237df9e9dac704d5195281e0baec4509facd347ff716d793b131bbaa", "cargo-1.82.0-aarch64-apple-darwin.tar.xz": "66b9acc4629a21896ebd96076016263461567b8faf4eb0b76d0a72614790f29a", "llvm-tools-1.82.0-aarch64-apple-darwin.tar.xz": "c663c58ef50ac4cad10e6fabe276bc4b1421821553464150dc8b97908605a5a8", "rust-std-1.82.0-aarch64-apple-darwin.tar.xz": "8b0786c55e02f3adc5df030861b6b60bc336326b9e372f6b1bf3040257621a90"},
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "libc",
    version = "0.2.159",
)
crate.from_specs(name = "crates")
use_repo(crate, "crates")

# ruby
bazel_dep(name = "rules_ruby", version = "0.16.0")

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    # Overridden for rb 3.3.5
    ruby_build_version = "20240903",
    version = "3.3.5",
)
ruby.bundle_fetch(
    name = "bundle",
    gem_checksums = {
        "ast-2.4.2": "1e280232e6a33754cde542bc5ef85520b74db2aac73ec14acef453784447cc12",
        "ffi-1.17.0": "51630e43425078311c056ca75f961bb3bda1641ab36e44ad4c455e0b0e4a231c",
        "ffi-1.17.0-arm64-darwin": "609c874e76614542c6d485b0576e42a7a38ffcdf086612f9a300c4ec3fcd0d12",
        "json-2.7.2": "1898b5cbc81cd36c0fd4d0b7ad2682c39fb07c5ff682fc6265f678f550d4982c",
        "language_server-protocol-3.17.0.3": "3d5c58c02f44a20d972957a9febe386d7e7468ab3900ce6bd2b563dd910c6b3f",
        "parallel-1.26.3": "d86babb7a2b814be9f4b81587bf0b6ce2da7d45969fab24d8ae4bf2bb4d4c7ef",
        "parser-3.3.5.0": "f30ebb71b7830c2e7cdc4b2b0e0ec2234900e3fca3fe2fba47f78be759181ab3",
        "racc-1.8.1": "4a7f6929691dbec8b5209a0b373bc2614882b55fc5d2e447a21aaa691303d62f",
        "rainbow-3.1.1": "039491aa3a89f42efa1d6dec2fc4e62ede96eb6acd95e52f1ad581182b79bc6a",
        "regexp_parser-2.9.2": "5a27e767ad634f8a4b544520d5cd28a0db7aa1198a5d7c9d7e11d7b3d9066446",
        "rubocop-1.66.1": "0679c263b1164fd003b8590ae83b3e9e9bf72282d411755f227f1d6268ee5ee7",
        "rubocop-ast-1.32.3": "40201e861c73a3c2d59428c7627828ef81fb2f8a306bc4a1c1801452afe3fe0f",
        "ruby-progressbar-1.13.0": "80fc9c47a9b640d6834e0dc7b3c94c9df37f08cb072b7761e4a71e22cff29b33",
        "unicode-display_width-2.6.0": "12279874bba6d5e4d2728cef814b19197dbb10d7a7837a869bab65da943b7f5a",
    },
    gemfile = "//src/rb:Gemfile",
    gemfile_lock = "//src/rb:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

# python
bazel_dep(name = "rules_python", version = "0.40.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    is_default = True,
    python_version = "3.13",
)

# swift
bazel_dep(name = "rules_swift", version = "2.2.4", repo_name = "build_bazel_rules_swift")
single_version_override(
    module_name = "rules_swift",
    patch_strip = 1,
    patches = [
        # Based on https://github.com/bazelbuild/rules_swift/pull/706
        "//src/swift/patches:swift-static-lib.patch",
    ],
)

# zig
bazel_dep(name = "rules_zig", version = "0.6.1")

zig = use_extension(
    "@rules_zig//zig:extensions.bzl",
    "zig",
)
zig.toolchain(zig_version = "0.13.0")
