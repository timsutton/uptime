# buildifier: disable=module-docstring
# we explicitly use platforms for //src/swift
bazel_dep(name = "platforms", version = "0.0.11")

# apple_support must be declared before rules_cc, and we use rules_cc for the c uptime target
# https://github.com/bazelbuild/rules_cc/pull/199
bazel_dep(name = "apple_support", version = "1.18.0", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_cc", version = "0.1.1")

# golang
bazel_dep(name = "rules_go", version = "0.52.0")
bazel_dep(name = "gazelle", version = "0.42.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")

# Download an SDK for the host OS & architecture as well as common remote execution platforms.
go_sdk.download(version = "1.23.1")

# kotlin
bazel_dep(name = "rules_kotlin", version = "2.1.0")
bazel_dep(name = "rules_graalvm", version = "0.11.1")

# rules_graalvm hasn't yet published 0.11.2 to BCR
archive_override(
    module_name = "rules_graalvm",
    integrity = "sha256-JweZfVu+CFIYM0Q78qJpUbyj+uBbb/l8983xDK0/vCA=",
    strip_prefix = "rules_graalvm-7c53c1a1ddf82fd775be2fc62d22783ec2ba4326",
    urls = ["https://github.com/sgammon/rules_graalvm/archive/7c53c1a1ddf82fd775be2fc62d22783ec2ba4326.tar.gz"],
)

gvm = use_extension("@rules_graalvm//:extensions.bzl", "graalvm")

# https://www.graalvm.org/release-calendar/
gvm.graalvm(
    name = "graalvm",
    distribution = "ce",  # `oracle`, `ce`, or `community`
    java_version = "22",  # `17`, `20`, `21`, or `22` as supported by the version provided
    version = "24.0.1",  # gvm sdk version format like `24.x.x` also supported
)
use_repo(gvm, "graalvm")

register_toolchains("@graalvm//:jvm")

register_toolchains("@graalvm//:sdk")

bazel_dep(name = "rules_jvm_external", version = "6.6")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "com.github.oshi:oshi-core:6.6.5",
    ],
)
use_repo(maven, "maven")

# rust
bazel_dep(name = "rules_rust", version = "0.57.1")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2021",
    sha256s = {
        "rustc-1.84.1-aarch64-apple-darwin.tar.xz": "08923de98c4ee89c816844a0e37e8be40a6cf81ed29c7a734f137d2ecc044730",
        "clippy-1.84.1-aarch64-apple-darwin.tar.xz": "fcd4630c34691c37199bd62fff9670bbb5d48b3c8aa16fbfe153cdcf1d56f635",
        "cargo-1.84.1-aarch64-apple-darwin.tar.xz": "61b459defb45a51d6c52cb1f5dbe915a9b99ca4c4bf291e4e33798ceb0ff5b90",
        "llvm-tools-1.84.1-aarch64-apple-darwin.tar.xz": "add6069ceaedcfb49aab007b0e8e17b9cde9226c31f3d00e5edcdd9b05e58fde",
        "rust-std-1.84.1-aarch64-apple-darwin.tar.xz": "f5ce8aa9a64e9e5429e552fd058d1046871b15b2fc248b4992a649d8a8eaf239",
        "rustc-1.84.1-aarch64-unknown-linux-gnu.tar.xz": "f4241e0d8b38789f1d99603b5fd1a307d6946a1eac18b80938b804da99bf105e",
        "clippy-1.84.1-aarch64-unknown-linux-gnu.tar.xz": "5e0c53401590fc3e117a9276d8f2e9b16f47e5ad5bbc176fc6d11d6d0b27514a",
        "cargo-1.84.1-aarch64-unknown-linux-gnu.tar.xz": "51455991bb2c3246af7312712e130313ed7969eb4befd5a50baf285bf21e8f46",
        "llvm-tools-1.84.1-aarch64-unknown-linux-gnu.tar.xz": "f3d405cc95e71421e13307d4d499b4dd9ca2bab5e32c864e7f5c5f7b74941661",
        "rust-std-1.84.1-aarch64-unknown-linux-gnu.tar.xz": "fac5c60fa657975860c9947dc1638f8b8a21e6492c9218433e3116d4a6e1ed97",
        "rustc-1.84.1-x86_64-unknown-linux-gnu.tar.xz": "ae9e4c996707a7152443639bd09de49afdcc37830ff8561872e718b0600a4fcf",
        "clippy-1.84.1-x86_64-unknown-linux-gnu.tar.xz": "94a6c434a3552b5e4ca6201c81f49009b316e3a41e5efb8868d16ce1a0185417",
        "cargo-1.84.1-x86_64-unknown-linux-gnu.tar.xz": "792214e185297d8a3fa65949f9f3001ddd7cc06e1e8afd2a042f7ca5a8af727b",
        "llvm-tools-1.84.1-x86_64-unknown-linux-gnu.tar.xz": "34eb0bb3586e32e7026f22b809d163fb4c007a23f246cfc803ba6f7c13245742",
        "rust-std-1.84.1-x86_64-unknown-linux-gnu.tar.xz": "553727eeee81f1b1e7f3c7b7fd023abfb62fe5aff7fe0b1c81d3b5b92ab8a474",
    },
    versions = ["1.84.1"],
)

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "libc",
    version = "0.2.169",
)
crate.from_specs(name = "crates")
use_repo(crate, "crates")

# ruby
bazel_dep(name = "rules_ruby", version = "0.17.0")

ruby = use_extension("@rules_ruby//ruby:extensions.bzl", "ruby")
ruby.toolchain(
    name = "ruby",
    # set ruby_build_version when rules_ruby hasn't yet caught up
    ruby_build_version = "20241225.2",
    version = "3.4.1",
)
ruby.bundle_fetch(
    name = "bundle",
    gem_checksums = {
        "ast-2.4.2": "1e280232e6a33754cde542bc5ef85520b74db2aac73ec14acef453784447cc12",
        "ffi-1.17.1": "26f6b0dbd1101e6ffc09d3ca640b2a21840cc52731ad8a7ded9fb89e5fb0fc39",
        "ffi-1.17.1-arm64-darwin": "a8e04f79d375742c54ee7f9fff4b4022b87200a4ec0eb082128d3b6559e67b4d",
        "json-2.9.1": "d2bdef4644052fad91c1785d48263756fe32fcac08b96a20bb15840e96550d11",
        "language_server-protocol-3.17.0.4": "c484626478664fd13482d8180947c50a8590484b1258b99b7aedb3b69df89669",
        "parallel-1.26.3": "d86babb7a2b814be9f4b81587bf0b6ce2da7d45969fab24d8ae4bf2bb4d4c7ef",
        "parser-3.3.7.0": "7449011771e3e7881297859b849de26a6f4fccd515bece9520a87e7d2116119b",
        "racc-1.8.1": "4a7f6929691dbec8b5209a0b373bc2614882b55fc5d2e447a21aaa691303d62f",
        "rainbow-3.1.1": "039491aa3a89f42efa1d6dec2fc4e62ede96eb6acd95e52f1ad581182b79bc6a",
        "regexp_parser-2.10.0": "cb6f0ddde88772cd64bff1dbbf68df66d376043fe2e66a9ef77fcb1b0c548c61",
        "rubocop-1.71.1": "d3dfd1e484a3a619dcf76c6a4fba694cd833921e4fd254d111845c26bcecfcfa",
        "rubocop-ast-1.38.0": "4fdf6792fe443a9a18acb12dbc8225d0d64cd1654e41fedb30e79c18edbb26ae",
        "ruby-progressbar-1.13.0": "80fc9c47a9b640d6834e0dc7b3c94c9df37f08cb072b7761e4a71e22cff29b33",
        "unicode-display_width-3.1.4": "8caf2af1c0f2f07ec89ef9e18c7d88c2790e217c482bfc78aaa65eadd5415ac1",
        "unicode-emoji-4.0.4": "2c2c4ef7f353e5809497126285a50b23056cc6e61b64433764a35eff6c36532a",
    },
    gemfile = "//src/rb:Gemfile",
    gemfile_lock = "//src/rb:Gemfile.lock",
)
use_repo(ruby, "bundle", "ruby", "ruby_toolchains")

register_toolchains("@ruby_toolchains//:all")

# python
bazel_dep(name = "rules_python", version = "1.1.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    is_default = True,
    python_version = "3.13",
)

# swift
bazel_dep(name = "rules_swift", version = "2.5.0", repo_name = "build_bazel_rules_swift")
single_version_override(
    module_name = "rules_swift",
    patch_strip = 1,
    patches = [
        # Based on https://github.com/bazelbuild/rules_swift/pull/706
        "//src/swift/patches:swift-static-lib.patch",
    ],
)

# zig
bazel_dep(name = "rules_zig", version = "0.6.1")

zig = use_extension(
    "@rules_zig//zig:extensions.bzl",
    "zig",
)
zig.toolchain(zig_version = "0.13.0")

# formatting
# (NOTE: we set up a lot of tool-specific repos here, wondering if we may be able to move
#  these out into their own non-root modules since they are used only for formatting or linting)
bazel_dep(name = "aspect_rules_lint", version = "1.1.0")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_jar = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_jar")

bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.0.1",
    dev_dependency = True,
)

http_archive(
    name = "swiftformat_mac",
    build_file_content = "filegroup(name = \"swiftformat_mac\", srcs=[\"swiftformat\"], visibility=[\"//visibility:public\"])",
    sha256 = "efdd7bde8a3989070d50b41f05745b2af6f771506f6a8317351b5c177a7e9732",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.55.5/swiftformat.zip",
)

http_archive(
    name = "swiftformat",
    build_file_content = "filegroup(name = \"swiftformat\", srcs=[\"swiftformat_linux\"], visibility=[\"//visibility:public\"])",
    sha256 = "c1cea7b6490f398377d6dbd76fa2740ce7434c1ec803deebad3367a57d119d0a",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.55.5/swiftformat_linux.zip",
)

# Note that we intentionally don't fetch clang-format from the llvm_toolchains repo, because the llvm archives
# are very time-consuming to download and extract.

# On Mac, mirror an arm64 copy from homebrew, which happens to build it portably
# - Note, this repo has Mac binaries but (1) the architectures can be not matching the filename, and (2) they depend on dylibs
#   not present on every Mac system.
http_file(
    name = "clang_format_mac",
    executable = True,
    sha256 = "ea8f6231e4f75362fa6d61135cb89f541c7821ac0edc7525c77ea91ba49b12bd",
    url = "https://github.com/timsutton/clang-format-binaries/releases/download/19.1.6/clang-format-darwin-arm64",
)

# On Linux we pull a static binary
http_file(
    name = "clang_format_linux",
    executable = True,
    sha256 = "8a933fe6eaac72f115d98ab56dc6e1b22af4dc53d32119108ebfd0b8e71ab6e1",
    url = "https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-46b8640/clang-format-19_linux-amd64",
)

http_jar(
    name = "ktfmt",
    integrity = "sha256-dtBcYU/hhkeIVXFw/olBD3UTSGap+EAR+b1XDKElJrE=",
    url = "https://github.com/facebook/ktfmt/releases/download/v0.53/ktfmt-0.53-jar-with-dependencies.jar",
)
