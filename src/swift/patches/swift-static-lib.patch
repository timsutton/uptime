diff --git a/swift/internal/compiling.bzl b/swift/internal/compiling.bzl
index 27a892b..7ce3b7e 100644
--- a/swift/internal/compiling.bzl
+++ b/swift/internal/compiling.bzl
@@ -44,6 +44,7 @@ load(
     "SWIFT_FEATURE_OPT_USES_WMO",
     "SWIFT_FEATURE_PROPAGATE_GENERATED_MODULE_MAP",
     "SWIFT_FEATURE_SPLIT_DERIVED_FILES_GENERATION",
+    "SWIFT_FEATURE_STATIC_STDLIB",
     "SWIFT_FEATURE_SYSTEM_MODULE",
     "SWIFT_FEATURE_THIN_LTO",
     "SWIFT_FEATURE_USE_EXPLICIT_SWIFT_MODULE_MAP",
diff --git a/swift/internal/feature_names.bzl b/swift/internal/feature_names.bzl
index 5d38fd3..a9a269f 100644
--- a/swift/internal/feature_names.bzl
+++ b/swift/internal/feature_names.bzl
@@ -281,6 +281,10 @@ SWIFT_FEATURE_ENABLE_SKIP_FUNCTION_BODIES = "swift.skip_function_bodies_for_deri
 # swift.coverage_prefix_map also remap the path in coverage data.
 SWIFT_FEATURE_REMAP_XCODE_PATH = "swift.remap_xcode_path"
 
+# If enabled the built binary will statically link Swift standard libraries.
+# This requires Swift 5.3.1
+SWIFT_FEATURE_STATIC_STDLIB = "swift.static_stdlib"
+
 # A private feature that is set by the toolchain if a flag enabling WMO was
 # passed on the command line using `--swiftcopt`. Users should never manually
 # enable, disable, or query this feature.
diff --git a/swift/toolchains/config/compile_config.bzl b/swift/toolchains/config/compile_config.bzl
index a6d630d..843bf5d 100644
--- a/swift/toolchains/config/compile_config.bzl
+++ b/swift/toolchains/config/compile_config.bzl
@@ -63,6 +63,7 @@ load(
     "SWIFT_FEATURE_OPT_USES_WMO",
     "SWIFT_FEATURE_REWRITE_GENERATED_HEADER",
     "SWIFT_FEATURE_SPLIT_DERIVED_FILES_GENERATION",
+    "SWIFT_FEATURE_STATIC_STDLIB",
     "SWIFT_FEATURE_SUPPORTS_BARE_SLASH_REGEX",
     "SWIFT_FEATURE_SYSTEM_MODULE",
     "SWIFT_FEATURE_THIN_LTO",
@@ -1042,6 +1043,16 @@ def compile_action_configs(
             configurators = [_frameworks_disable_autolink_configurator],
         ),
 
+        # Enable the built modules to reference static Swift standard libraries.
+        ActionConfigInfo(
+            actions = [
+                SWIFT_ACTION_COMPILE,
+                SWIFT_ACTION_DERIVE_FILES,
+            ],
+            configurators = [add_arg("-static-stdlib")],
+            features = [SWIFT_FEATURE_STATIC_STDLIB],
+        ),
+
         # User-defined conditional compilation flags (defined for Swift; those
         # passed directly to ClangImporter are handled above).
         ActionConfigInfo(
diff --git a/swift/toolchains/swift_toolchain.bzl b/swift/toolchains/swift_toolchain.bzl
index 64a8e2b..88d4e8b 100644
--- a/swift/toolchains/swift_toolchain.bzl
+++ b/swift/toolchains/swift_toolchain.bzl
@@ -57,6 +57,7 @@ load(
     "SWIFT_FEATURE_MODULE_MAP_HOME_IS_CWD",
     "SWIFT_FEATURE_NO_GENERATED_MODULE_MAP",
     "SWIFT_FEATURE_OPT_USES_WMO",
+    "SWIFT_FEATURE_STATIC_STDLIB",
     "SWIFT_FEATURE_USE_AUTOLINK_EXTRACT",
     "SWIFT_FEATURE_USE_GLOBAL_INDEX_STORE",
     "SWIFT_FEATURE_USE_GLOBAL_MODULE_CACHE",
@@ -335,7 +336,8 @@ def _swift_unix_linkopts_cc_info(
         cpu,
         os,
         toolchain_label,
-        toolchain_root):
+        toolchain_root,
+        static_stdlib):
     """Returns a `CcInfo` containing flags that should be passed to the linker.
 
     The provider returned by this function will be used as an implicit
@@ -349,27 +351,43 @@ def _swift_unix_linkopts_cc_info(
         toolchain_label: The label of the Swift toolchain that will act as the
             owner of the linker input propagating the flags.
         toolchain_root: The toolchain's root directory.
+        static_stdlib: Whether to statically link Swift standard libraries.
 
     Returns:
         A `CcInfo` provider that will provide linker flags to binaries that
         depend on Swift targets.
     """
 
-    # TODO(#8): Support statically linking the Swift runtime.
-    platform_lib_dir = "{toolchain_root}/lib/swift/{os}".format(
-        os = os,
-        toolchain_root = toolchain_root,
-    )
+    if static_stdlib:
+        platform_lib_dir = "{toolchain_root}/lib/swift_static/{os}".format(
+            os = os,
+            toolchain_root = toolchain_root,
+        )
+    else:
+        platform_lib_dir = "{toolchain_root}/lib/swift/{os}".format(
+            os = os,
+            toolchain_root = toolchain_root,
+        )
+
+    linkopts = [
+        "-pie",
+        "-L{}".format(platform_lib_dir),
+        "-Wl,-rpath,{}".format(platform_lib_dir),
+    ]
+
+    # Appending generic linker args from Swift runtime.
+    if static_stdlib:
+        static_stdlib_args = "{platform_lib_dir}/static-stdlib-args.lnk".format(
+            platform_lib_dir = platform_lib_dir,
+        )
+        linkopts.append("@{}".format(static_stdlib_args))
 
     runtime_object_path = "{platform_lib_dir}/{cpu}/swiftrt.o".format(
         cpu = cpu,
         platform_lib_dir = platform_lib_dir,
     )
 
-    linkopts = [
-        "-pie",
-        "-L{}".format(platform_lib_dir),
-        "-Wl,-rpath,{}".format(platform_lib_dir),
+    linkopts += [
         "-lm",
         "-lstdc++",
         "-lrt",
@@ -436,6 +454,7 @@ def _swift_toolchain_impl(ctx):
             ctx.attr.os,
             ctx.label,
             toolchain_root,
+            SWIFT_FEATURE_STATIC_STDLIB in ctx.features,
         )
 
     # TODO: Remove once we drop bazel 7.x support
diff --git a/tools/worker/work_processor.cc b/tools/worker/work_processor.cc
index eac88b4..d46e3ee 100644
--- a/tools/worker/work_processor.cc
+++ b/tools/worker/work_processor.cc
@@ -85,6 +85,7 @@ void WorkProcessor::ProcessWorkRequest(
   std::string emit_module_path;
   std::string emit_objc_header_path;
   bool is_wmo = false;
+  bool is_static_stdlib = false;
   bool is_dump_ast = false;
 
   std::string prev_arg;
@@ -101,6 +102,8 @@ void WorkProcessor::ProcessWorkRequest(
       arg.clear();
     } else if (prev_arg == "-emit-module-path") {
       emit_module_path = arg;
+    } else if (arg == "-static-stdlib") {
+      is_static_stdlib = true;
     } else if (prev_arg == "-emit-objc-header-path") {
       emit_objc_header_path = arg;
     } else if (ArgumentEnablesWMO(arg)) {
@@ -114,7 +117,7 @@ void WorkProcessor::ProcessWorkRequest(
     prev_arg = original_arg;
   }
 
-  bool is_incremental = !is_wmo && !is_dump_ast;
+  bool is_incremental = !is_wmo && !is_dump_ast && !is_static_stdlib;
 
   if (!output_file_map_path.empty()) {
     if (is_incremental) {
